stages:
  - build
  - deploy
  - production
  - prepare
  - release
variables:
  CONTAINER_IMAGE_LATEST: $CONTAINER_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:latest
  CONTAINER_IMAGE_VERSION: $CONTAINER_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME:gitlab-$CI_COMMIT_SHORT_SHA
before_script:
  - apt update && apt install -y gettext-base jq
build:
  stage: build
  variables:
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    DOCKER_HOST: tcp://localhost:2375/
  image: cr.yandex/yc/metadata-token-docker-helper:0.2
  services:
    - docker:19.03.1-dind
  script:
    - docker pull $CONTAINER_IMAGE_LATEST || true
    - docker build . -t $CONTAINER_IMAGE_VERSION --cache-from $CONTAINER_IMAGE_LATEST
    - docker image tag $CONTAINER_IMAGE_VERSION $CONTAINER_IMAGE_LATEST
    - docker image push $CONTAINER_IMAGE_LATEST
    - docker image push $CONTAINER_IMAGE_VERSION
  only:
    refs:
      - master
deploy:
  image: gcr.io/cloud-builders/kubectl:latest
  stage: deploy
  needs:
    - build
  environment:
    name: deploy
    url: https://pet.dev.findinamika.com/$CI_PROJECT_NAME/api-docs/
    kubernetes:
      namespace: $CI_PROJECT_NAMESPACE
  script:
    - kubectl config set-cluster .k8s --server="$KUBE_URL" --insecure-skip-tls-verify=true
    - kubectl config set-credentials admin --token="$KUBE_TOKEN"
    - kubectl config set-context default --cluster=.k8s --user=admin
    - kubectl config use-context default
    - .k8s/k8s.sh
  artifacts:
    when: on_failure
    expire_in: 1 weeks
    name: "$CI_JOB_NAME"
    paths:
      - .k8s/*.yaml
  only:
    refs:
      - master
production:
  when: manual
  image: gcr.io/cloud-builders/kubectl:latest
  stage: production
  needs:
    - build
  environment:
    name: production
    url: https://pet.findinamika.com/$CI_PROJECT_NAME/api-docs/
    kubernetes:
      namespace: $CI_PROJECT_NAMESPACE-production
  script:
    - kubectl config set-cluster .k8s --server="$KUBE_URL" --insecure-skip-tls-verify=true
    - kubectl config set-credentials admin --token="$KUBE_TOKEN"
    - kubectl config set-context default --cluster=.k8s --user=admin
    - kubectl config use-context default
    - .k8s/k8s.sh -n $CI_PROJECT_NAMESPACE-production
  artifacts:
    when: on_failure
    expire_in: 1 weeks
    name: "$CI_JOB_NAME"
    paths:
      - .k8s/*.yaml
  only:
    refs:
      - master
prepare_job:
  stage: prepare                                              # This stage must run before the release stage
  rules:
    - if: $CI_COMMIT_TAG
      when: never                                             # Do not run this job when a tag is created manually
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH             # Run this job when commits are pushed or merged to the default branch
  script:
    - echo "EXTRA_DESCRIPTION=some message" >> variables.env  # Generate the EXTRA_DESCRIPTION and TAG environment variables
    - echo "TAG=v$(cat VERSION)" >> variables.env             # and append to the variables.env file
  artifacts:
    reports:
      dotenv: variables.env                                   # Use artifacts:reports:dotenv to expose the variables to other jobs

release_job:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  needs:
    - job: prepare_job
      artifacts: true
  rules:
    - if: $CI_COMMIT_TAG
      when: never                                  # Do not run this job when a tag is created manually
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH  # Run this job when commits are pushed or merged to the default branch
  script:
    - echo "running release_job for $TAG"
  release:
    name: 'Release $TAG'
    description: 'Created using the release-cli $EXTRA_DESCRIPTION'  # $EXTRA_DESCRIPTION and the $TAG
    tag_name: '$TAG'                                                 # variables must be defined elsewhere
    ref: '$CI_COMMIT_SHA'                                            # in the pipeline. For example, in the
    milestones:                                                      # prepare_job
      - "1.0.0"